{"version":3,"sources":["App.js","actions/index.js","reportWebVitals.js","reducers/counter.js","reducers/logged.js","reducers/index.js","index.js"],"names":["App","counter","useSelector","state","isLogged","dispatch","useDispatch","className","onClick","type","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","loggedReducer","allReducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAmBeA,MAhBf,WACE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAWF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YACtCC,EAAWC,cAEjB,OACE,sBAAKC,UAAU,MAAf,UACE,0CAAaN,KACb,wBAAQO,QAAS,kBAAMH,ECVlB,CACHI,KAAM,YACNC,QDQwC,KAA1C,eACA,wBAAQF,QAAS,kBAAMH,ECJlB,CACHI,KAAM,eDGR,eACCL,EAAW,uEAAiD,OEDpDO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCICQ,EAXQ,WAAwB,IAAvBjB,EAAsB,uDAAd,EAAGkB,EAAW,uCAC1C,OAAOA,EAAOZ,MACV,IAAK,YACD,OAAON,EAAQkB,EAAOX,QAC1B,IAAK,YACD,OAAOP,EAAQ,EACnB,QACI,OAAOA,ICEJmB,EATO,WAA4B,IAA3BnB,EAA0B,wDAAXkB,EAAW,uCAC7C,OAAOA,EAAOZ,MACV,IAAK,UACD,OAAQN,EACZ,QACI,OAAOA,ICDNoB,EAAcC,YAAgB,CACvCvB,QAASmB,EACThB,SAAUkB,ICGRG,EAAQC,YACZH,EACAI,OAAOC,8BAAgCD,OAAOC,gCAyChDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAASA,EAAnB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.4211d67c.chunk.js","sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { increment, decrement } from './actions';\n\nfunction App() {\n  const counter = useSelector(state => state.counter)\n  const isLogged = useSelector(state => state.isLogged)\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <h1>Counter {counter}</h1>\n      <button onClick={() => dispatch(increment(5))}>+</button>\n      <button onClick={() => dispatch(decrement())}>-</button>\n      {isLogged ? <h3>Valuable Information I should not see</h3> : ''}\n      \n    </div>\n  );\n}\n\nexport default App;\n","export const increment = (nr) => {\r\n    return {\r\n        type: 'INCREMENT',\r\n        payload: nr\r\n    };\r\n};\r\n\r\nexport const decrement = () => {\r\n    return {\r\n        type: 'DECREMENT'\r\n    };\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const counterReducer = (state = 0, action) => {\r\n    switch(action.type){\r\n        case \"INCREMENT\":\r\n            return state + action.payload;\r\n        case \"DECREMENT\":\r\n            return state - 1;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default counterReducer;","const loggedReducer = (state = false, action) => {\r\n    switch(action.type){\r\n        case \"SIGN_IN\":\r\n            return !state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default loggedReducer;","import counterReducer from './counter';\r\nimport loggedReducer from './logged';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport const allReducers = combineReducers({\r\n    counter: counterReducer,\r\n    isLogged: loggedReducer\r\n\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { allReducers } from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n/*\nimport {createStore} from 'redux';\n\n\n//Action -> increment\nconst increment = () => {\n  return {\n    type: 'INCREMENT'\n  }\n}\n\nconst decrement = () => {\n  return {\n    type: 'DECREMENT'\n  }\n}\n\n//Reducer -> check which action you did and based on that it will modify the store\nconst counter = (state = 0, action) => {\n  switch(action.type){\n    case \"INCREMENT\":\n      return state + 1\n    case \"DECREMENT\":\n      return state - 1\n  }\n}\n\n//Store -> globalizes state (holds all of our state)\nlet store = createStore(counter)\n\n//Display it in the store\nstore.subscribe(() => console.log(store.getState()))\n\n//Dispatcher -> execute that action\nstore.dispatch(increment());\nstore.dispatch(decrement());\nstore.dispatch(decrement());\n\n*/\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}